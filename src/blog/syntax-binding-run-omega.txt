[div=bdocs]
[ul][li][url=http://patch-tag.com/r/gallais/agda/snapshot/current/content/raw/src/generic/unindexed.agda]Raw Agda[/url][/li]
[li][url=code/SyntaxWithBinding/unindexed.html]Colored Agda[/url][/li]
[/ul][/div]

[pid=chapo]Generic programming has proven useful to define automatically operations
acting on datatypes [i]à la[/i] deriving in Haskell. However usual presentations
do not allow the user to highlight some constructors as binding variables in the
context. For every language with binders defined in such a universe, it is therefore
necessary to define manually substitution and to prove its properties.

[br]In this blog post, we strive to define a universe for syntaxes with binding
for which substitution can be defined generically.[/p]

[p]Operations such as maps, induction principles, equality tests, etc. acting on
inductive datatypes can be defined generically over datatypes inhabiting a universe.
Altenkirch and McBride [footnote][url=http://www.citeulike.org/user/gallais/article/6926730]
Generic Programming within Dependently Typed Programming[/url][/footnote] have shown how
dependently-typed systems can accomodate these mechanisms as a set of libraries
rather than e.g. a pre-processor.[/p]

[h3]The universe[/h]

[p]Our set of description constructors is basically identical to the one of McBride
in his paper on ornaments [footnote]Ornamental algebras, algebraic ornaments
([url=https://personal.cis.strath.ac.uk/conor.mcbride/pub/OAAO/Ornament.pdf]pdf[/url])[/footnote]
except for an extra constructor which allows us to introduce a new variable. It
comes with a decoding function which, for this is the non dependent case, can be
defined separately. We will however present each constructor together with its
semantics given by the decoding function [span=inline-code]⟦_⟧[/span] in the pure tradition of
Induction-Recursion [footnote]Cf. e.g. Peter Dybjer's [url=http://www.cse.chalmers.se/~peterd/papers/inductive.html]
work[/url].[/footnote]. This decoding function defines an endofunctor on [span=inline-code]List V → Set[/span].[/p]

[p=code]data Desc : Set₁ where
⟦_⟧ : ∀ {V} → Desc → (R : List V → Set) → List V → Set[/p]

[p]Sigma types can either be used in a non-dependent fashion in order to store
elements of a set inside the structure of the datatype e.g. when defining lists;
or to give the user a set (indexed by [span=inline-code]A[/span] of different constructors she may
use.[/p]

[p=code]`σ[_]_ : (A : Set) → (da : (a : A) → Desc) → Desc
⟦ `σ[ A ] d ⟧ R Γ = Σ A (λ a → ⟦ d a ⟧ R Γ)[/p]

[p]Recursive positions are the variable positions in the functor and are therefore
interpreted by [span=inline-code]R[/span] which will be the fixpoint itself when tying the knot.
They correspond to e.g. the tail of the list in the description of the [span=inline-code]_∷_[/span]
constructor.[/p]

[p=code]`r_ : (d : Desc) → Desc
⟦ `r d ⟧ R Γ = R Γ × ⟦ d ⟧ R Γ[/p]

[p]Units are used to state that a description is finished. In the indexed case,
they will be tagged with an index restricting the type of the branch they belong
to.[/p]

[p=code]`1 : Desc
⟦ `1 ⟧ R Γ = ⊤[/p]

[p]Binders expect the user to provide an identifier for the bound variable and
then keep going through the reste of the definition with an extended context.
In this post, we never use informative identifiers but we can easily imagine
taking advantage of a set with decidable equality to alleviate the burden of
calling a variable by providing a proof that it belongs to an environment.[/p]

[p=code]`λ_ : (d : Desc) → Desc
⟦ `λ d ⟧ R Γ = Σ _ (λ v → ⟦ d ⟧ R (v ∷ Γ))[/p]

[p]So far so good but... we have no way to actually use a variable! Sure, we can
declare as many new ones as we fancy and have the joy of seeing them floating
around in the context, but we might want to actually do something with them at
some point.[/p]

[h4]What is a variable?[/h]

[p]In our universe with binders, we want to have a substitution operation
generically defined on all the datatypes using binding. In other words, a
variable's only purpose is to be substituted by a "proper" term. In a sense,
a variable is just a placeholder for a "real" term, an excuse for an inhabitant
which has not been crafted yet.
[br]This is the reason why variables are treated separately: a whole subterm and
a variable should be on an equal footing. This ascertainment induces us to enrich
the meaning endofunctor with a position for variables right before building its
fixpoint.[/p]

[p=code]L⟦_⟧ : ∀ {V} → Desc → (R : List V → Set) → List V → Set
L⟦ d ⟧ R Γ = Σ _ (λ v → v ∈ Γ) ⊎ ⟦ d ⟧ R Γ

data `μ {V} (d : Desc) (Γ : List V) : Set where
  `⟨_⟩ : (t : L⟦ d ⟧ (`μ d) Γ) → `μ d Γ[/p]

[p]Obviously Agda does not complain about our definition: the described functors
are strictly positive by construction and accordingly have a fixpoint.[/p]

[h3]Defining substitution[/h]

[p]We call substitution for [span=inline-code]d[/span] from [span=inline-code]Γ[/span] to [span=inline-code]Δ[/span], a function
which provides for each variable in [span=inline-code]Γ[/span] a term of type [span=inline-code]`μ d[/span]
using variables taken in [span=inline-code]Δ[/span].[/p]

[p=code]subst[_] : ∀ {V} → Desc → List V → List V → Set
subst[ d ] Γ Δ = ∀ v → v ∈ Γ → `μ d Δ[/p]

[p]As one would expect from the name of this function, given a substitution for
[span=inline-code]d[/span] from [span=inline-code]Γ[/span] to [span=inline-code]Δ[/span] and a term in [span=inline-code]`μ d[/span] with free
variables ranging in [span=inline-code]Γ[/span], one can build a term in [span=inline-code]`μ d[/span] only using
variables in [span=inline-code]Δ[/span]. The whole process corresponds to applying this substitution
and is defined by two mutually defined functions.
[br]A term is either a variable, in which case we can just apply the substitution,
or it is an inhabitant of the functor applied to the fixpoint and we rely on the
helper function to propagate calls to the substitution on recursive positions.[/p]

[p=code]mutual
  _∶_⇇_ : ∀ {V} {Γ Δ : List V} d (t : `μ d Γ)
    (ρ : subst[ d ] Γ Δ) → `μ d Δ
  d ∶ `⟨ inj₁ (v , pr) ⟩ ⇇ ρ = ρ v pr
  d ∶ `⟨ inj₂ t        ⟩ ⇇ ρ = `⟨ inj₂ (map⟦ d ⟧ t ρ) ⟩[/p]

[p]The helper function is quite straightforward to define except for the case
where we go under a binder. In this case, we extend the substitution with the
identity on the first variable and weaken the terms corresponding to the other
ones. The careful reader will notice the generalization applied to the type of
the recursive positions to ensure that the definition goes through. In practice,
all direct calls to [span=inline-code]map⟦_⟧[/span] will be such that [span=inline-code]d = e[/span].[/p]

[p=code]  map⟦_⟧ : ∀ {V} d {e} {Γ Δ : List V} (t : ⟦ d ⟧ (`μ e) Γ)
    (ρ : subst[ e ] Γ Δ) → ⟦ d ⟧ (`μ e) Δ
  map⟦ `σ[ A ] d ⟧ (a , t) ρ = a         , map⟦ d a ⟧ t ρ
  map⟦ `r d      ⟧ (r , t) ρ = _ ∶ r ⇇ ρ , map⟦ d ⟧ t ρ
  map⟦ `1        ⟧ t       ρ = t
  map⟦ `λ d      ⟧ (v , t) ρ = v , map⟦ d ⟧ t ρ'
    where ρ' = λ { .v z      → `⟨ inj₁ (v , z) ⟩ ;
                    w (s pr) → weaken _ _ (ρ w pr) }[/p]

[p]Given an easy proof relying on weakening that the identity substitution exists,
it is rather easy to define what's named β reduction in the lambda calculus.[/p]

[p=code]βred : ∀ {V} d {Γ v} → `μ d (v ∷ Γ) → `μ d Γ → `μ d Γ
βred d {Γ} {v} t u = d ∶ t ⇇ ρ
  where ρ = λ { .v z      → u ;
                 w (s pr) → subst-id d Γ w pr }[/p]

[h3]Examples[/h]

[p]When building examples, we introduce enumerations of labels corresponding to
the different constructors of the language. We hope the definitions of the various
[span=inline-code]Desc[/span] functors to be easier to understand this way.
[br]Let's start with a very simple language: the untyped lambda calculus. Its
grammar has two components: one can introduce a lambda abstraction (label
[span=inline-code]lam[/span]) which binds a variable and contains a subterm (a recursive position
[span=inline-code]`r[/span]) or an applications (label [span=inline-code]app[/span]) which contains two subterms.
The set of lambda terms with variables in [span=inline-code]Γ[/span] is then given by [span=inline-code]`μ[/span].
The set of closed terms is therefore [span=inline-code]lc [][/span][/p]

[p=code]lc-grammar : Desc
lc-grammar =
  `σ[ lc-labl ] λ { lam → `λ `r `1 ;
                    app → `r `r `1 }

lc : ∀ (Γ : List ⊤) → Set
lc Γ = `μ lc-grammar Γ[/p]

[p]Using Andjelkovic and Gundry's pattern synonyms [footnote]
[url=http://code.google.com/p/agda/issues/detail?id=495]Feature request[/url]
on agda's bug tracker.[/footnote], we can recover a nice syntax closer to the one we are
used to. Our lambdas, variables and applications will desugar to the somewhat
horrendous codes describing elements of the fixpoint of [span=inline-code]lc-grammar[/span].
We can, for instance, define the well-known looping function [span=inline-code]:Ω[/span].[/p]

[p=code]:δ :Ω : lc []
:δ = :λ :v z :$ :v z
:Ω = :δ :$ :δ[/p]

[p]We can now define a function [span=inline-code]fire : lc [] → Maybe (lc [])[/span] which explores
a (closed) term looking for a redex and returns either nothing if the term is in
weak-head normal form or just the term after having fired the first redex encountered.
Iterating [span=inline-code]fire[/span] on a term gives rise to an [span=inline-code]execute[/span] function
which produces a [span=inline-code]CoList[/span] of successive reducts.[/p]

[p]As one would expect, running [span=inline-code]:Ω[/span] yields an infinitely long [span=inline-code]CoList[/span]
of [span=inline-code]:Ω[/span]s.[/p]

[p=code]lemma : execute :Ω ≣ repeat :Ω
lemma = ∷ ♯ lemma[/p]

[h3]What's next?[/h]

[p]I cooked up the [url=http://patch-tag.com/r/gallais/agda/snapshot/current/content/raw/src/generic/indexed.agda]indexed version[/url]
with which it is possible to get sexy well-typed terms for the simply-typed lambda
calculus such as [span=inline-code]`K[/span]. But that is another story.[/p]

[p=code]`K : ∀ {Γ σ τ} → Γ ⊢ σ `→ τ `→ σ
`K = :λ :λ :v (s z)[/p]
