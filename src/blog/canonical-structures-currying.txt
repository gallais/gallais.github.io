[div=bdocs][ul]
[li][url=https://hal.inria.fr/hal-00816703]Mahboubi & Tassi's paper[/url][/li]
[li][url=https://gist.github.com/gallais/d3dae1f7d5fe9e9d5ab5]Universe for Currying[/url][/li]
[li][url=https://gist.github.com/gallais/8923120a41396bb21615]Canonical Structures for Currying[/url][/li]
[/ul][/div]

[pid=chapo]I have been meaning to have a look at Canonical Structures at
some point since Beta Ziliani told me about 4 years ago that all the Ltac
magic I was doing to reify expressions could be handed over to the inference
engine. Yesterday I was finally given a simple opportunity to play with
them. Here's the result.[/p]

[p]Whilst reading [url=http://coq-blog.clarus.me/simple-unit-testing-in-coq.html]a
completely unrelated blog post[/url] about unit testing in Coq, I stumbled
upon a series of almost identical functions named [tt]List.map_pair[/tt],
[tt]List.map_triple[/tt] and [tt]List.map_quad[/tt]. I thought to myself
that, surely, it should be possible in a language with type-level computations
to do away with the sort of [url=http://hackage.haskell.org/package/base-4.8.1.0/docs/Data-List.html#v:zipWith3]monstrosities[/url]
one can sometime find in Haskell libraries.
Introducing [url=https://gist.github.com/gallais/d3dae1f7d5fe9e9d5ab5]a
Universe closed under products[/url] can indeed allow the definition of
generic (un)currying functions. However we are still left with the burden
of reifying the domain of the function we want to curry. Annoying.[/p]

[h2][center]Canonical Structures to the rescue![/center][/h]

[p]That is when Canonical Structures come to the rescue: they are a way
to give hints to the unification algorithm when it faces a problem of the
shape [tt]project ?x ~ term[/tt] where [tt]project[/tt] is a projection
out of a record, [tt]?x[/tt] is a unification variable and [tt]term[/tt]
is... a term. Because this unification step can lead to new ones, we
effectively have a way to encode a prolog-like proof search. And we are
going to use it to generate the right sort of currying.[/p]

[h3]The Class of domains which can be curried[/h]

[p]This whole development is following quite closely the really good
introduction [url=https://hal.inria.fr/hal-00816703]Canonical Structures
for the working Coq user[/url]. We start by defining a module which
contains first and foremost a Record [tt]class[/tt] indexed by a domain
[tt]Dom[/tt] and a type constructor [tt]Curr[/tt] such that [tt]Curr a[/tt]
is a curried version of the function space [tt]Dom -> a[/tt] as witnessed
by the [tt]Fun[/tt] stored in the record.[/p]

[p=code]Module Currying.
  Record class (Dom : Type) (Curr : Type -> Type) :=
         Class { Fun : forall cod, Curr cod -> (Dom -> cod) }.
[/p]

[p]We then define a structure called [tt]type[/tt] packing together
a [tt]Dom[/tt], a [tt]Curr[/tt] and the [tt]class Dom Curr[/tt] evidence
that they are related.[/p]

[p=code]  Structure type := Pack { dom      : Type
                         ; curr     : Type -> Type
                         ; class_of : class dom curr }.
[/p]

[p]Now, remember that canonical structures are used to give hints to the
unification algorithm when facing [tt]project ?x ~ term[/tt] problems.
Having this [tt]type[/tt] structure will allow us to generate
[tt]dom ?x ~ something[/tt] unification problems which means that the
unification algorithm will be able to infer from the shape of the domain
what its curried version is. In order to trigger these unification problems,
we are defining a special version of [tt]map[/tt] on [tt]list[/tt]:[/p]

[p=code]  Definition flippedmap (Curry : type) :
    forall cod, list (dom Curry) -> curr Curry cod -> list cod.
    refine (let 'Pack _ _ (Class fc) := Curry
            in fun cod xs f => List.map _ xs) ; apply fc, f.
  Defined.
[/p]

[p]Multiple things are going on here. First we define the function
interactively because we have some nasty type-level dependencies and
this post is not about dependent matching in Coq. Second we implemented
[tt]flippedmap[/tt] rather than [tt]map[/tt] because taking the function
first would create a unification problem [tt]curr ?x ~ [some function type][/tt]
which is obviously harder to resolve than [tt]list (dom ?x) ~ list ([some type])[/tt].[/p]

[p]We can introduce a notation in order to recover the usual arguments
order. We then close our [tt]Currying[/tt] module and bring the notation
into scope.[/p]

[p=code]  Module theory.
  Notation "f <$> xs" := (flippedmap xs f) (at level 70).
  End theory.
End Currying.

Import Currying.theory.[/p]

[h3]The Canonical Structures associated to [tt]Currying.type[/tt][/h]

[p]Now that our interface has been defined, it is time to populate it
with canonical instances. The first one simply states that given two
domains we know how to curry, we can explain how to curry their product.
The nesting [tt]fun cod => Currying.curr c1 (Currying.curr c2 cod)[/tt]
is chosen so that arguments are kept in the right order.[/p]

[p=code]Definition pair_curry (c1 c2 : Currying.type) :
           forall cod, Currying.curr c1 (Currying.curr c2 cod) ->
                       (Currying.dom c1 * Currying.dom c2) -> cod.
  intros cod f (a, b).
  apply c2 ; [| exact b].
  apply c1 ; [| exact a].
  exact f.
Defined.

Canonical Structure CurryingPair (c1 : Currying.type) (c2 : Currying.type) : Currying.type :=
  Currying.Pack (Currying.dom c1 * Currying.dom c2)
                (fun cod => Currying.curr c1 (Currying.curr c2 cod))
                (Currying.Class (pair_curry c1 c2)).
[/p]

[p]That's all well and good except that we don't know yet how to deal
with base types. Should we add an instance for each one of them? And
what about type variables? It turns out that we can rely on the fact
that these hints are tried in the order they are declared in and introduce
a defaulting instance which does not do anything as witnessed by its
[tt]Fun[/tt] component which is simply the identity.[/p]

[p=code]Canonical Structure failsafe (a : Type) : Currying.type :=
  Currying.Pack a (fun cod => a -> cod) (Currying.Class (fun _ f => f)).[/p]


[h3]Concluding Examples[/h]

[p]Thanks to the canonical structures, we can effortlessly recover the
functions [tt]List.map_pair[/tt], [tt]List.map_triple[/tt] and
[tt]List.map_quad[/tt] I mentioned earlier:[/p]

[p=code]Definition map_pair {A B C} (f : A -> B -> C) (l : list (A * B)) : list C := f <$> l.
Definition map_triple {A B C D} (f : A -> B -> C -> D) (l : list (A * B * C)) : list D := f <$> l.
Definition map_quad {A B C D E} (f : A -> B -> C -> D -> E) (l : list (A * B * C * D)) : list E := f <$> l.[/p]

[p]But we can also deal with arbitrary nesting patterns:[/p]

[p=code]Definition map_nestedpairs {A B C D E} (f : A -> B -> C -> D -> E) (l : list ((A * B) * (C * D))) : list E := f <$> l.
[/p]
